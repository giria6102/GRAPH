void dfs(int node,int& parent,int &timer,unordered_map<int,bool>&vis,vector<int>&low,vector<int>&disc,unordered_map<int,list<int>>&adj,vector<vector<int>>&result){
    vis[node]=true;
    disc[node]=low[node]=timer++;
    for(auto neighbour:adj[node]){
        if(neighbour==parent){
            continue;
        }
        else if(!vis[neighbour]){
            dfs(neighbour,node,timer,vis,low,disc,adj,result);
            low[node]=min(low[node],low[neighbour]);
            if(low[neighbour]>disc[node]){
                vector<int>ans;
                ans.push_back(node);
                ans.push_back(neighbour);
                result.push_back(ans);
            }
        }
        else{
            low[node]=min(low[node],disc[neighbour]);
        }
    }
}
vector<vector<int>> findBridges(vector<vector<int>> &edges, int v, int e) {
   unordered_map<int,list<int>>adj;
   for(int i=0;i<edges.size();i++){
       int u=edges[i][0];
       int v=edges[i][1];

       adj[u].push_back(v);
       adj[v].push_back(u);
   }
   int timer=0;
   vector<int>disc(v);
   vector<int>low(v);
   int parent=-1;
   unordered_map<int,bool>vis;
   for(int i=0;i<v;i++){
       disc[i]=-1;
       low[i]=-1;
   }
   vector<vector<int>>result;
   for(int i=0;i<v;i++){
        if(!vis[i]){
            dfs(i,parent,timer,vis,low,disc,adj,result);
        }
   }
   return result;

}
