void dfs(int node,unordered_map<int,bool>&vis,unordered_map<int,list<int>>&adj,stack<int>&s){
	vis[node]=1;
	for(auto nbr:adj[node]){
		if(!vis[nbr]){
			dfs(nbr,vis,adj,s);
		}
		
	}
	s.push(node);
}
void revdfs(unordered_map<int,list<int>>&adj,int& node,unordered_map<int,bool>&vis){
	vis[node]=1;
	for(auto nbr:adj[node]){
                if (!vis[nbr]) {
                        revdfs(adj, nbr, vis);
                }
        }
}
int stronglyConnectedComponents(int v, vector<vector<int>> &edges)
{
	unordered_map<int,list<int>>adj;
	for(int i=0;i<edges.size();i++){
		int u=edges[i][0];
		int v=edges[i][1];

		adj[u].push_back(v);
	}
	unordered_map<int,bool>vis;
	stack<int>s;
	//for all components
	for(int i=0;i<v;i++){
		if(!vis[i]){
			dfs(i,vis,adj,s);
		}
	}

	//topological sort
	//transpose of graph
	unordered_map<int,list<int>>transpose;
	for(int i=0;i<v;i++){
		vis[i]=0;
		for(auto nbr:adj[i]){
			transpose[nbr].push_back(i);
		}
	}

	int cnt=0;
	while(!s.empty()){
		int top=s.top();
		s.pop();
		if(!vis[top]){
			cnt++;
			revdfs(transpose,top,vis);
		}
	}
	return cnt;
}
